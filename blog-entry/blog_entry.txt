python-coprocess

- https://tyk.io/docs/customise-tyk/plugins/rich-plugins/python/
- Ubuntu 19.04 (but should be the same everywhere)
- questions for matias
  - can we use python 3.7? why are we on the old version
  - (note that this says we can use 3.x: https://github.com/TykTechnologies/tyk/tree/master/coprocess/python what is true?)
- Install python 3.4 (see above)
  - apt-get install python3.4
  - apt-get install libpython3.4
  - Note: if we do `apt-get install python3` we will get 3.7 for the `python3` binary. The docs above say we only need libpython3.4 so i guess we are ok.
- install grpcio, protobuf packages
- Build protobuffs, gRPC for performance
  - refer to docs
    - need a link
  - if we don't build from scratch, note that we need to install
  - @matias: why do we depend on protobufs & gRPC for the python integration? general architecture question (ie are we using grpc under the hood?)
  - problem building cpp stuff for python
    "ogle/protobuf/pyext/descriptor.cc -o build/temp.linux-x86_64-3.7/google/protobuf/pyext/descriptor.o -Wno-write-strings -Wno-invalid-offsetof -Wno-sign-compare
    google/protobuf/pyext/descriptor.cc: In function ‘bool google::protobuf::python::_CalledFromGeneratedFile(int)’:
    google/protobuf/pyext/descriptor.cc:58:45: error: invalid conversion from ‘const char*’ to ‘char*’ [-fpermissive]
            ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
                          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
    google/protobuf/pyext/descriptor.cc:119:7: note: in expansion of macro ‘PyString_AsStringAndSize’
       if (PyString_AsStringAndSize(frame->f_code->co_filename,
           ^~~~~~~~~~~~~~~~~~~~~~~~
    google/protobuf/pyext/descriptor.cc: In function ‘PyObject* google::protobuf::python::service_descriptor::FindMethodByName(google::protobuf::python::PyBaseDescriptor*, PyObject*)’:
    google/protobuf/pyext/descriptor.cc:58:45: error: invalid conversion from ‘const char*’ to ‘char*’ [-fpermissive]
            ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
                          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
    google/protobuf/pyext/descriptor.cc:1587:7: note: in expansion of macro ‘PyString_AsStringAndSize’
       if (PyString_AsStringAndSize(arg, &name, &name_size) < 0) {
           ^~~~~~~~~~~~~~~~~~~~~~~~
    error: command 'x86_64-linux-gnu-gcc' failed with exit status 1
     ✘ ⚡ root@tyk-XPS-15-9570  /usr/src/protobuf-3.1.0/python  python3 setup.py build --cpp_implementation

    "
- Make python auth middleware plugin
  - this will be expanded based on ldap stuff?
  - following tutorial
    - https://tyk.io/docs/customise-tyk/plugins/rich-plugins/python/custom-auth-python-tutorial/
  - note that we will serve the bundle.zip via `python -m http.server`. there *could* be something running on this port already
    - if there is something running on that port, use `lsof -i :8000` to see what it is
    - maybe `docker ps; docker stop $whatever` or otherwise kill what's waiting
    - test to make sure it's working via `wget http://localhost:8000/bundle.zip`
  - useful things
    - https://github.com/TykTechnologies/tyk-plugin-demo-python
    - https://github.com/TykTechnologies/tyk/tree/master/coprocess/python
    - https://tyk.io/docs/customise-tyk/plugins/rich-plugins/python/custom-auth-python-tutorial/#a-name-configure-api-a-configuring-the-api
- Set up tyk
  - see example from doc (https://tyk.io/docs/customise-tyk/plugins/rich-plugins/python/custom-auth-python-tutorial/#a-name-configure-a-configuring-tyk)
  - note that first time through we are not setting the public key path, but we should go thru the exercise of generating one for the document
- Set up API
  - Create API (keyless)
  - Test that it proxies to httpbin
  - use these config options
    - https://tyk.io/docs/customise-tyk/plugins/rich-plugins/python/custom-auth-python-tutorial/#a-name-configure-api-a-configuring-the-api
      "
      "
  - you should see this on the tyk console log:
    "[Jul 13 16:49:18]  INFO main: Initialising Tyk REST API Endpoints
    [Jul 13 16:49:18]  INFO main: Loading API configurations.
    [Jul 13 16:49:18]  INFO main: Tracking hostname api_name=httpbin domain=(no host)
    [Jul 13 16:49:18]  INFO Loading API api_id=3b45c7cba66a404163ed62c349acf929 api_name=httpbin org_id=5d11de28936f9f2f61d104a9
    [Jul 13 16:49:18]  INFO main: ----> Fetching Bundle: bundle.zip
    [Jul 13 16:49:18]  INFO main: ----> Loading bundle: bundle.zip
    [Jul 13 16:49:18]  INFO main: ----> Verifying bundle: bundle.zip
    [Jul 13 16:49:18]  INFO main: ----> Bundle is valid, adding to spec: bundle.zip
    [Jul 13 16:49:18]  INFO python: Loading module: '3b45c7cba66a404163ed62c349acf929_c343271e0935000c0ea41f8d9822015c'
    [Jul 13 16:49:18]  INFO gateway: API Loaded api_id=3b45c7cba66a404163ed62c349acf929 api_name=httpbin org_id=5d11de28936f9f2f61d104a9 server_name=-- user_id=-- user_ip=--
    [Jul 13 16:49:18]  INFO main: Processed and listening on: /httpbin/{rest:.*}
    [Jul 13 16:49:18]  INFO host-check-mgr: Loading uptime tests...
    [Jul 13 16:49:18]  INFO main: Initialised API Definitions
    [Jul 13 16:49:18]  INFO main: API reload complete
    "
  - test that the custom auth works with the provided example middleware
- API Custom Auth is now working!!
  - Now you are ready to start developing your custom auth plugin for this API
  - QUESTION: how to force bundle reloads?
    - see docs here: https://tyk.io/docs/customise-tyk/plugins/rich-plugins/plugin-bundles/
- LDAP
  - You can run OpenLDAP in docker for development purposes
  - use openldap/run_ldap.sh to start both an OpenLDAP instance and a phpldapadmin instance. it will run the necessary docker containers and output a URL and username/password for the admin interface
  - create a posix group
    - testgroup
  - create a user
    - test user
    - password: test123
    - select the above group
    - use all defaults
  - view the user
    - select the user to get its 'distinguished name'
- test authorization against this LDAP user
  - install python-ldap system dependencies
    - sudo apt-get install -y python-dev libldap2-dev libsasl2-dev libssl-dev
  - install (globally) the python-ldap package
    - sudo pip3 install python-ldap
  - docs for python-ldap
    - https://www.python-ldap.org/en/python-ldap-3.2.0/reference/ldap.html
